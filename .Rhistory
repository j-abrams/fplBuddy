element_type == 2 ~ "DEF",
element_type == 3 ~ "MID",
element_type == 4 ~ "FWD"
)
) %>%
# join with period - will be used to find strength index
left_join(period, by = c("team" = "id")) %>%
select(-team, -gameweek) %>%
dplyr::rename("team" = "team.y") %>%
# Define average_points, used to develop the final points index
# This is points scored by each player so far this season.
# Limited as we have only had two gameweeks at the time of writing!
select(name, team, opponent, everything()) %>%
group_by(name) %>%
mutate(average_points = round((total_points / gw), 2)) %>%
ungroup() %>%
# james_points_index & james_ict_index
# fuzzyjoin - the first step towards computing finalpoints and ict index scores
fuzzyjoin::stringdist_left_join(last_season_index, by = "name", max_dist = 2) %>%
# Soooo messy. Still so many players names don't match. See archives
# This is a mess because names do not match in the two datasets
# Adjust points index with "weight" - whether to prioritise this season form or last season average
# As time moves on weight should adjust closer to 1 - as more gw data becomes available
dplyr::rename("name" = "name.x") %>%
mutate(james_points_index = ifelse(is.na(average_points.y),
average_points.x,
(weight * average_points.x) +
((1 - weight) * average_points.y))) %>%
# Adjust ICT index with weight factor in the same manner as above
mutate(ict_index_lag = ict_index / gw) %>%
mutate(james_ict_index = ifelse(is.na(ict_index_avg),
ict_index_lag,
(weight * ict_index_lag) +
((1 - weight) * ict_index_avg))) %>%
# james_strength_index
# Calculate james_strength_index here - differential between strengths of home and away teams
# On average home / away doesnt necessarily effect individual performances too highly
mutate(james_strength_index =
# Add "was_home"
was_home +
ifelse(was_home == 1,
(as.numeric(strength_overall_home) -
as.numeric(strength_overall_away)) / 100,
(as.numeric(strength_overall_away) -
as.numeric(strength_overall_home)) / 100)
) %>%
# Determine which factors influence proceedings most heavily - points and ict (0.30 and 0.24 correlation)
# TODO: Rename strength_index to be fixture_index.
mutate(james_strength_index = james_strength_index * strength_index) %>%
# james_odds_index and james_cs_index
# Fix mitrovic player name
mutate(second_name = ifelse(team == "Fulham" & startsWith(name, "Aleksandar"), "Mitrovic", second_name)) %>%
# Combine with latest odds data here
# solution using str_convert to get a better match
mutate(second_name = str_convert(second_name)) %>%
#mutate(name = str_convert(name)) %>%
left_join(odds_gs, by = c("second_name" = "Name")) %>%
left_join(odds_cs, by = c("team" = "Team")) %>%
# Standardise
# Fix goals
mutate(AnytimeGoal = as.numeric(minutes) * as.numeric(AnytimeGoal)) %>%
mutate(AnytimeGoal = range01(ifelse(is.na(AnytimeGoal), 0, AnytimeGoal))) %>%
# Fix assists
mutate(AnytimeAssist = as.numeric(minutes) * as.numeric(AnytimeAssist)) %>%
mutate(AnytimeAssist = range01(ifelse(is.na(AnytimeAssist), 0, AnytimeAssist))) %>%
# Fix clean sheets
mutate(clean_sheet_odds = as.numeric(minutes) * as.numeric(clean_sheet_odds)) %>%
mutate(clean_sheet_odds = range01(ifelse(is.na(clean_sheet_odds), 0, clean_sheet_odds))) %>%
# james_odds_index
# Include points gathered for mins played in the following manner
# Include assist points
# Points for a goal scored vary on position - hence employing a case when statement
mutate(james_odds_index =
# Modelling Assumption - Include extra points scored for minutes played
range01(minutes) * 2 +
# 3 points for registering an assist
AnytimeAssist * 3 +
# Points for scoring a goal
case_when(
position == "FWD" ~ AnytimeGoal * 4,
position == "MID" ~ AnytimeGoal * 5,
position == "DEF" ~ AnytimeGoal * 6,
position == "GK"  ~ AnytimeGoal * 6
)
)
odds_gs = odds_gs_gw5
odds_cs = odds_cs_gw5
# gw is used as a conversion for total points scored so far - to average points per gw
# Therefore for gw 4, we want to divide total points by number of gameweeks completed so far: 3
gw <- gw - 1
# Data preparation
last_season_index <- fpl_historical_performance_data
# TODO: include Ilkay Gundogan - visit archives - long.
# Coefficient Used later for scaling in accordance with round01 standardisation function
odds_cs_max <- max(odds_cs$clean_sheet_odds)
# function from fplr package - return data on all 593 current players
players <- fpl_get_player_all()
# Data wrangling
players_collated <- players %>%
mutate(name = paste(first_name, second_name)) %>%
select(name, second_name, team, minutes, element_type, now_cost, total_points, ict_index) %>%
# Define position from element_type variable here.
mutate(position =
case_when(
element_type == 1 ~ "GK",
element_type == 2 ~ "DEF",
element_type == 3 ~ "MID",
element_type == 4 ~ "FWD"
)
) %>%
# join with period - will be used to find strength index
left_join(period, by = c("team" = "id")) %>%
select(-team, -gameweek) %>%
dplyr::rename("team" = "team.y") %>%
# Define average_points, used to develop the final points index
# This is points scored by each player so far this season.
# Limited as we have only had two gameweeks at the time of writing!
select(name, team, opponent, everything()) %>%
group_by(name) %>%
mutate(average_points = round((total_points / gw), 2)) %>%
ungroup() %>%
# james_points_index & james_ict_index
# fuzzyjoin - the first step towards computing finalpoints and ict index scores
fuzzyjoin::stringdist_left_join(last_season_index, by = "name", max_dist = 2) %>%
# Soooo messy. Still so many players names don't match. See archives
# This is a mess because names do not match in the two datasets
# Adjust points index with "weight" - whether to prioritise this season form or last season average
# As time moves on weight should adjust closer to 1 - as more gw data becomes available
dplyr::rename("name" = "name.x") %>%
mutate(james_points_index = ifelse(is.na(average_points.y),
average_points.x,
(weight * average_points.x) +
((1 - weight) * average_points.y))) %>%
# Adjust ICT index with weight factor in the same manner as above
mutate(ict_index_lag = ict_index / gw) %>%
mutate(james_ict_index = ifelse(is.na(ict_index_avg),
ict_index_lag,
(weight * ict_index_lag) +
((1 - weight) * ict_index_avg))) %>%
# james_strength_index
# Calculate james_strength_index here - differential between strengths of home and away teams
# On average home / away doesnt necessarily effect individual performances too highly
mutate(james_strength_index =
# Add "was_home"
was_home +
ifelse(was_home == 1,
(as.numeric(strength_overall_home) -
as.numeric(strength_overall_away)) / 100,
(as.numeric(strength_overall_away) -
as.numeric(strength_overall_home)) / 100)
) %>%
# Determine which factors influence proceedings most heavily - points and ict (0.30 and 0.24 correlation)
# TODO: Rename strength_index to be fixture_index.
mutate(james_strength_index = james_strength_index * strength_index) %>%
# james_odds_index and james_cs_index
# Fix mitrovic player name
mutate(second_name = ifelse(team == "Fulham" & startsWith(name, "Aleksandar"), "Mitrovic", second_name)) %>%
# Combine with latest odds data here
# solution using str_convert to get a better match
mutate(second_name = str_convert(second_name)) %>%
#mutate(name = str_convert(name)) %>%
left_join(odds_gs, by = c("second_name" = "Name")) %>%
left_join(odds_cs, by = c("team" = "Team")) %>%
# Standardise
# Fix goals
mutate(AnytimeGoal = as.numeric(minutes) * as.numeric(AnytimeGoal)) %>%
mutate(AnytimeGoal = range01(ifelse(is.na(AnytimeGoal), 0, AnytimeGoal))) %>%
# Fix assists
mutate(AnytimeAssist = as.numeric(minutes) * as.numeric(AnytimeAssist)) %>%
mutate(AnytimeAssist = range01(ifelse(is.na(AnytimeAssist), 0, AnytimeAssist))) %>%
# Fix clean sheets
mutate(clean_sheet_odds = as.numeric(minutes) * as.numeric(clean_sheet_odds)) %>%
mutate(clean_sheet_odds = range01(ifelse(is.na(clean_sheet_odds), 0, clean_sheet_odds))) %>%
# james_odds_index
# Include points gathered for mins played in the following manner
# Include assist points
# Points for a goal scored vary on position - hence employing a case when statement
mutate(james_odds_index =
# Modelling Assumption - Include extra points scored for minutes played
range01(minutes) * 2 +
# 3 points for registering an assist
AnytimeAssist * 3 +
# Points for scoring a goal
case_when(
position == "FWD" ~ AnytimeGoal * 4,
position == "MID" ~ AnytimeGoal * 5,
position == "DEF" ~ AnytimeGoal * 6,
position == "GK"  ~ AnytimeGoal * 6
)
) %>%
# remove NAs
mutate(james_odds_index = ifelse(is.na(james_odds_index), 0, james_odds_index)) %>%
# Standardise and scale cs_index relative to minutes played
# Reason for doing this - only have totals for teams at the moment
mutate(james_cs_index =
odds_cs_max *
case_when(
position == "MID" ~ clean_sheet_odds * 1,
position == "DEF" ~ clean_sheet_odds * 4,
position == "GK"  ~ clean_sheet_odds * 4,
# Striker will score 0 extra points for clean sheet
TRUE ~ 0
)
) %>%
# HOT FIX - 2 ben davies in the listings. One plays for spurs, the other for liverpool
# Fuck off ben davies
#group_by(name) %>%
#filter(minutes == max(minutes)) %>%
#ungroup() %>%
# group_by(second_name) %>%
# filter(total_points == max(total_points)) %>%
# ungroup() %>%
# Problematic Players ...
# Why are they problematic? Cos second name is matched More than once,
# so these players have inflated odds indexes
# "Taylor Richards"    "Abdoulaye Doucouré" "Tom Davies"         "Harry Wilson"       "Nampalys Mendy"
# "Daniel James"       "Tyler Adams"        "Archie Gray"        "Jordan Henderson"   "Rhys Williams"
# "Luke Chambers"      "Harvey Davies"      "Kalvin Phillips"    "Brandon Williams"   "Amad Diallo"
# "Jamal Lewis"        "Steve Cook"         "Omar Richards"      "Stuart Armstrong"   "Davinson Sánchez"
# "Harvey White"       "Ben Johnson"        "Jackson Smith"
select("name", "second_name", "team", "position",
"opponent", "was_home", "now_cost",
"james_odds_index", "james_cs_index",
"james_points_index", "james_ict_index", "james_strength_index")
# gw is used as a conversion for total points scored so far - to average points per gw
# Therefore for gw 4, we want to divide total points by number of gameweeks completed so far: 3
gw <- gw - 1
# Data preparation
last_season_index <- fpl_historical_performance_data
# TODO: include Ilkay Gundogan - visit archives - long.
# Coefficient Used later for scaling in accordance with round01 standardisation function
odds_cs_max <- max(odds_cs$clean_sheet_odds)
# function from fplr package - return data on all 593 current players
players <- fpl_get_player_all()
# Data wrangling
players_collated <- players %>%
mutate(name = paste(first_name, second_name)) %>%
select(name, second_name, team, minutes, element_type, now_cost, total_points, ict_index) %>%
# Define position from element_type variable here.
mutate(position =
case_when(
element_type == 1 ~ "GK",
element_type == 2 ~ "DEF",
element_type == 3 ~ "MID",
element_type == 4 ~ "FWD"
)
) %>%
# join with period - will be used to find strength index
left_join(period, by = c("team" = "id")) %>%
select(-team, -gameweek) %>%
dplyr::rename("team" = "team.y") %>%
# Define average_points, used to develop the final points index
# This is points scored by each player so far this season.
# Limited as we have only had two gameweeks at the time of writing!
select(name, team, opponent, everything()) %>%
group_by(name) %>%
mutate(average_points = round((total_points / gw), 2)) %>%
ungroup() %>%
# james_points_index & james_ict_index
# fuzzyjoin - the first step towards computing finalpoints and ict index scores
fuzzyjoin::stringdist_left_join(last_season_index, by = "name", max_dist = 2) %>%
# Soooo messy. Still so many players names don't match. See archives
# This is a mess because names do not match in the two datasets
# Adjust points index with "weight" - whether to prioritise this season form or last season average
# As time moves on weight should adjust closer to 1 - as more gw data becomes available
dplyr::rename("name" = "name.x") %>%
mutate(james_points_index = ifelse(is.na(average_points.y),
average_points.x,
(weight * average_points.x) +
((1 - weight) * average_points.y))) %>%
# Adjust ICT index with weight factor in the same manner as above
mutate(ict_index_lag = ict_index / gw) %>%
mutate(james_ict_index = ifelse(is.na(ict_index_avg),
ict_index_lag,
(weight * ict_index_lag) +
((1 - weight) * ict_index_avg))) %>%
# james_strength_index
# Calculate james_strength_index here - differential between strengths of home and away teams
# On average home / away doesnt necessarily effect individual performances too highly
mutate(james_strength_index =
# Add "was_home"
was_home +
ifelse(was_home == 1,
(as.numeric(strength_overall_home) -
as.numeric(strength_overall_away)) / 100,
(as.numeric(strength_overall_away) -
as.numeric(strength_overall_home)) / 100)
) %>%
# Determine which factors influence proceedings most heavily - points and ict (0.30 and 0.24 correlation)
# TODO: Rename strength_index to be fixture_index.
mutate(james_strength_index = james_strength_index * strength_index)
players_collated_2 <- players_collated %>%
# james_odds_index and james_cs_index
# Fix mitrovic player name
mutate(second_name = ifelse(team == "Fulham" & startsWith(name, "Aleksandar"), "Mitrovic", second_name)) %>%
# Combine with latest odds data here
# solution using str_convert to get a better match
mutate(second_name = str_convert(second_name)) %>%
#mutate(name = str_convert(name)) %>%
left_join(odds_gs, by = c("second_name" = "Name")) %>%
left_join(odds_cs, by = c("team" = "Team"))
View(odds_gs)
View(odds_cs)
players_collated_2 <- players_collated %>%
# james_odds_index and james_cs_index
# Fix mitrovic player name
mutate(second_name = ifelse(team == "Fulham" & startsWith(name, "Aleksandar"), "Mitrovic", second_name)) %>%
# Combine with latest odds data here
# solution using str_convert to get a better match
mutate(second_name = str_convert(second_name)) %>%
#mutate(name = str_convert(name)) %>%
left_join(odds_gs, by = c("second_name" = "Name"))
View(odds_gs)
View(players_collated)
View(odds_cs)
table(players_collated$team)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#path <- "data/FFP Points Predictor gw5.csv"
#odds_gs_gw5 <- fpl_odds_generator_gs(path)
odds_gs_gw5 <- odds_gs_gw5
url <- "https://www.fantasyfootballreports.com/premier-league-clean-sheet-odds/"
xpath <- '//*[@id="tablepress-166"]'
odds_cs_gw5 <- odds_cs_gw5
url <- "https://www.fantasyfootballreports.com/premier-league-clean-sheet-odds/"
xpath <- '//*[@id="tablepress-166"]'
odds_cs_gw5 <- fpl_odds_generator_cs(url, xpath)
View(odds_cs_gw5)
#usethis::use_data(fpl_historical_data, overwrite = T)
all_gameweeks_21_22 <- fpl_load_historic_data()
period <-
fpl_fixtures(5, 5)
fpl_fixtures_difficulty_rating(5, 5)
#usethis::use_data(fpl_historical_performance_data)
players_index <- fplBuddy::fpl_calculate_predictors(period, weight = 0.5, strength_index = 1, gw = 5,
odds_gs_gw5, odds_cs_gw5)
View(players_index)
players_index <- fplBuddy::fpl_calculate_predictors(period, weight = 0.5, strength_index = 1, gw = 5,
odds_gs_gw5, odds_cs_gw5) %>%
filter(is.na(name))
players_index <- fplBuddy::fpl_calculate_predictors(period, weight = 0.5, strength_index = 1, gw = 5,
odds_gs_gw5, odds_cs_gw5)
players_index %>%
filter(is.na(name))
names(players_index)
players_index %>%
filter(is.na(second_name))
players_index %>%
filter(is.na(team))
players_index %>%
filter(is.na(james_odds_index))
players_index %>%
filter(is.na(james_strength_index))
players_index %>%
filter(is.na(startsWith("james")))
players_index %>%
filter(is.na(james_cs_index))
players_index %>%
filter(is.na(james_points_index))
players_index %>%
filter(is.na(james_ict_index))
players_index %>%
filter(is.na(james_opponent_index))
players_index %>%
filter(is.na(opponent))
players_index %>%
filter(is.na(was_home))
weight = 0.5
strength_index = 1
gw = 5
odds_gs = odds_gs_gw5
odds_cs = odds_cs_gw5
gw <- gw - 1
# Data preparation
last_season_index <- fpl_historical_performance_data
# TODO: include Ilkay Gundogan - visit archives - long.
# Coefficient Used later for scaling in accordance with round01 standardisation function
odds_cs_max <- max(odds_cs$clean_sheet_odds)
# function from fplr package - return data on all 593 current players
players <- fpl_get_player_all()
# Data wrangling
players_collated <- players %>%
mutate(name = paste(first_name, second_name)) %>%
select(name, second_name, team, minutes, element_type, now_cost, total_points, ict_index) %>%
# Define position from element_type variable here.
mutate(position =
case_when(
element_type == 1 ~ "GK",
element_type == 2 ~ "DEF",
element_type == 3 ~ "MID",
element_type == 4 ~ "FWD"
)
) %>%
# join with period - will be used to find strength index
left_join(period, by = c("team" = "id")) %>%
select(-team, -gameweek) %>%
dplyr::rename("team" = "team.y") %>%
# Define average_points, used to develop the final points index
# This is points scored by each player so far this season.
# Limited as we have only had two gameweeks at the time of writing!
select(name, team, opponent, everything()) %>%
group_by(name) %>%
mutate(average_points = round((total_points / gw), 2)) %>%
ungroup() %>%
# james_points_index & james_ict_index
# fuzzyjoin - the first step towards computing finalpoints and ict index scores
fuzzyjoin::stringdist_left_join(last_season_index, by = "name", max_dist = 2) %>%
# Soooo messy. Still so many players names don't match. See archives
# This is a mess because names do not match in the two datasets
# Adjust points index with "weight" - whether to prioritise this season form or last season average
# As time moves on weight should adjust closer to 1 - as more gw data becomes available
dplyr::rename("name" = "name.x") %>%
mutate(james_points_index = ifelse(is.na(average_points.y),
average_points.x,
(weight * average_points.x) +
((1 - weight) * average_points.y))) %>%
# Adjust ICT index with weight factor in the same manner as above
mutate(ict_index_lag = ict_index / gw) %>%
mutate(james_ict_index = ifelse(is.na(ict_index_avg),
ict_index_lag,
(weight * ict_index_lag) +
((1 - weight) * ict_index_avg))) %>%
# james_strength_index
# Calculate james_strength_index here - differential between strengths of home and away teams
# On average home / away doesnt necessarily effect individual performances too highly
mutate(james_strength_index =
# Add "was_home"
was_home +
ifelse(was_home == 1,
(as.numeric(strength_overall_home) -
as.numeric(strength_overall_away)) / 100,
(as.numeric(strength_overall_away) -
as.numeric(strength_overall_home)) / 100)
) %>%
# Determine which factors influence proceedings most heavily - points and ict (0.30 and 0.24 correlation)
# TODO: Rename strength_index to be fixture_index.
mutate(james_strength_index = james_strength_index * strength_index) %>%
# james_odds_index and james_cs_index
# Fix mitrovic player name
mutate(second_name = ifelse(team == "Fulham" & startsWith(name, "Aleksandar"), "Mitrovic", second_name))
players_2 <- players_collated %>%
# Combine with latest odds data here
# solution using str_convert to get a better match
mutate(second_name = str_convert(second_name)) %>%
#mutate(name = str_convert(name)) %>%
left_join(odds_gs, by = c("second_name" = "Name"))
View(players_2)
View(odds_gs_gw5)
devtools::document()
#path <- "data/FFP Points Predictor gw5.csv"
#odds_gs_gw5 <- fpl_odds_generator_gs(path)
odds_gs_gw5 <- fpl_odds_generator_gs( odds_gs_gw5)
fpl_odds_generator_gs(odds_gs_gw5)
devtools::document()
#path <- "data/FFP Points Predictor gw5.csv"
odds_gs_gw5 <- fpl_odds_generator_gs(odds_gs_gw5)
url <- "https://www.fantasyfootballreports.com/premier-league-clean-sheet-odds/"
xpath <- '//*[@id="tablepress-166"]'
odds_cs_gw5 <- fpl_odds_generator_cs(url, xpath)
#usethis::use_data(fpl_historical_data, overwrite = T)
all_gameweeks_21_22 <- fpl_load_historic_data()
period <- fpl_fixtures(5, 5)
#fpl_fixtures_difficulty_rating(5, 5)
#usethis::use_data(fpl_historical_performance_data)
players_index <- fplBuddy::fpl_calculate_predictors(period, weight = 0.5, strength_index = 1, gw = 5,
odds_gs_gw5, odds_cs_gw5)
players_xP <- fpl_calculate_xP(players_index, predictors_odds)
sum(players_xP$xP)
devtools::document()
user <- "6238967"
players_xP <- fpl_calculate_xP(players_index, predictors_odds, user)
sum(players_xP$xP)
View(players_xP)
players_xP <- fpl_calculate_xP(players_index, predictors_indexes, user)
sol <- fpl_optimise(players_xP, players_xP$xP, budget = 83)
sum(players_xP$xP)
#odds
players_xP1 <- fpl_calculate_xP(players_index, predictors_odds, user)
sum(players_xP1$xP)
#indexes
players_xP2 <- fpl_calculate_xP(players_index, predictors_indexes, user)
sum(players_xP2$xP)
#odds
players_xP <- fpl_calculate_xP(players_index, predictors_odds, user)
sum(players_xP$xP)
#indexes
players_xP2 <- fpl_calculate_xP(players_index, predictors_indexes, user)
sum(players_xP2$xP)
sol <- fpl_optimise(players_xP, players_xP$xP, budget = 83)
sol2 <- fpl_optimise(players_xP2, players_xP$xP, budget = 83)
View(sol)
View(sol2)
sol <- fpl_optimise(players_xP, players_xP$xP, budget = 83)
sol2 <- fpl_optimise(players_xP2, players_xP2$xP, budget = 83)
sum(sol$xP)
sum(sol2$xP)
sol3 <- fpl_optimise_my_team(players_xp, players_xP$xP, budget = 83, 2)
sol3 <- fpl_optimise_my_team(players_xP, players_xP$xP, budget = 83, 2)
View(sol3)
sum(sol3$xP)
devtools::document()
fplBuddy::system.file()
use_mit_license()
check()
devtools::document()
check()
devtools::document()
check()
